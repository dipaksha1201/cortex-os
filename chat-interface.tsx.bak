import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { FileText, Mic, Paperclip, RefreshCcw } from "lucide-react"

interface ChatItem {
  title: string
  preview: string
}

const chatItems: ChatItem[] = [
  {
    title: "Eigenvalues and Eigenvectors Explained",
    preview: "What are Eigenvalues and EigenVectors ?",
  },
  {
    title: "Matrix Calculation Steps",
    preview: "also - The solution t for the equation Zt = s and the reason for it",
  },
  {
    title: "Normalized Vector Explanation",
    preview: "and what is vector projection and scalar projection",
  },
  {
    title: "Vector Operations Overview",
    preview: "Tech me amour Vector operations",
  },
  {
    title: "Derivatives and Partial Derivatives",
    preview: "",
  },
  {
    title: "Neuron Calculation and Activation",
    preview: "",
  },
  {
    title: "Eigenvalues and Eigenvectors Computation",
    preview: "",
  },
  {
    title: "Matrix Operations Query",
    preview: "",
  },
  {
    title: "Vector computation request",
    preview: "Give the latex code for this as a section",
  },
  {
    title: "Unit Vector Explanation",
    preview: "what is a unit vector",
  },
  {
    title: "Vector Operations LaTeX Code",
    preview: "Why is it not supporting in jupyter notebook",
  },
  {
    title: "Vector Operations in LaTeX",
    preview:
      "5. The matrix (either X, Y, or Z) in which the row vectors form an orthogonal set sole this and give the l...",
  },
]

export default function ChatInterface() {
  return (
    // Chat Interface Design
    // Project Header with project name and icon
    <div className="max-w-3xl mx-auto p-4 space-y-4">
      <header className="flex items-center gap-4 mb-6">
        <div className="h-12 w-12 bg-gray-100 rounded-full flex items-center justify-center">
          <FileText className="h-6 w-6 text-gray-600" />
        </div>
        <h1 className="text-2xl font-bold">Project X</h1>
      </header>

    {/* Text Input to initiate a new chat in the project */}
      <Card className="p-4 bg-gray-50">
        <div className="text-sm text-gray-600 mb-2">New chat in this project</div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="icon">
            <Mic className="h-5 w-5" />
          </Button>
          <Button variant="ghost" size="icon">
            <Paperclip className="h-5 w-5" />
          </Button>
        </div>
      </Card>

      {/* Section to upload new documents to the project */}
      <div className="grid grid-cols-2 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="font-medium mb-1">Add files</h2>
              <p className="text-sm text-gray-500">Chats in this project can access file content</p>
            </div>
            <Button variant="ghost" size="icon">
              <RefreshCcw className="h-4 w-4" />
            </Button>
          </div>
        </Card>

        <Card className="p-4">
          <div>
            <h2 className="font-medium mb-1">Instructions</h2>
            <p className="text-sm text-gray-500 truncate">
              I will give you a question after the question is provide...
            </p>
          </div>
        </Card>
      </div>

      {/* Section to display chats in the project */}
      <div>
        <h2 className="text-sm font-medium mb-3">Chats in this project</h2>
        <ScrollArea className="h-[600px] pr-4">
          <div className="space-y-2">
            {chatItems.map((item, index) => (
              <Card key={index} className="p-3 hover:bg-gray-50 transition-colors cursor-pointer">
                <h3 className="font-medium mb-1">{item.title}</h3>
                {item.preview && <p className="text-sm text-gray-500 truncate">{item.preview}</p>}
              </Card>
            ))}
          </div>
        </ScrollArea>
      </div>
    </div>
  )
}

